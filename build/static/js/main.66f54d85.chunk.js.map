{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNAUeA,EARF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,mBAAqB,iBACpD,OAAO,wBAAIC,UAAU,QAClBJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCMzBK,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAGH,yBAAKJ,UAAU,SAASI,ICUrBC,EAfA,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,qG,gBCXNC,EAAU,oDAuBD,EArBA,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAChBC,GAAI,IACJd,QAAS,6BACTe,KAAM,2BACNjB,WAAW,GAEf,OAAOY,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAAAO,GAEX,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCqE9BK,EApFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEGlB,MAAK,SAAAmB,GACJT,EAASS,QAEZ,IAEHC,QAAQC,IAAI,UAAWZ,EAAMa,OAAQ,UAErC,IAqBMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAAC7C,GAAD,OAAUA,EAAKG,aAoBlE,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAAS4B,IACvB,6BACE,4BAAQ9B,QAAS,kBAAM6B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGU,EAAYE,KAAI,SAAC9C,EAAM+C,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACL/C,KAAMA,EACNC,iBAAkB,kBAhCD,SAACkB,GAC1B,IAAMnB,EAAO8B,EAAMmB,MAAK,SAAAC,GAAC,OAAIA,EAAE/B,KAAOA,KAChCgC,EAAW,2BAAQnD,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EACUpB,EAAIgC,GACX9B,MAAK,SAAA+B,GACJrB,EAASD,EAAMgB,KAAI,SAAA9C,GAAI,OAAIA,EAAKmB,KAAOA,EAAKnB,EAAOoD,SAEpDC,OAAM,SAAAC,GACLjB,EAAgB,SAAD,OAAUrC,EAAKK,QAAf,sCACfkD,YAAW,WACTlB,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAAAK,GAAC,OAAIA,EAAE/B,KAAOA,SAkBRqC,CAAmBxD,EAAKmB,WAItD,0BAAMsC,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBvD,QAAS2B,EACTZ,MAAM,IAAIyC,MAAOC,cACjB3D,UAAW4D,KAAKC,SAAW,IAG7BzB,EACUqB,GACPvC,MAAK,SAAA+B,GACJrB,EAASD,EAAMN,OAAO4B,IACtBnB,EAAW,SAgDX,2BAAOgC,MAAOjC,EAASkC,SA5CJ,SAACR,GACxBjB,QAAQC,IAAIgB,EAAMS,OAAOF,OACzBhC,EAAWyB,EAAMS,OAAOF,UA2CpB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MChFNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.66f54d85.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make unimportant' : 'make important';\r\n  return <li className='note'>\r\n    {note.content}\r\n    <button onClick={toggleImportance}>{label}</button>\r\n  </li>;\r\n};\r\n\r\nexport default Note;\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null;\r\n    } else {\r\n        return (\r\n            <div className='error'>{message}</div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Notification;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Departem of Computer Science, University of Helsinki 2020</em>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;","import axios from 'axios';\r\nconst baseUrl = 'https://fullstackesim2020.herokuapp.com/api/notes';\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    const nonExisting = {\r\n        id: 1000,\r\n        content: 'This note is not on server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting));\r\n};\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n    return request.then(response => response.data);\r\n};\r\n\r\nexport default { getAll, create, update };","import React, { useState, useEffect } from \"react\";\r\nimport Notes from \"./components/Note\";\r\nimport Notification from \"./components/Notification\";\r\nimport Footer from './components/Footer';\r\nimport noteService from './services/notes';\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState(\"\");\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes);\r\n      });\r\n  }, []);\r\n\r\n  console.log('render ', notes.length, ' notes');\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n    };\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote));\r\n        setNewNote('');\r\n      });\r\n  };\r\n\r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value);\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(n => n.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote));\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(`Note '${note.content}' was already removed from server`);\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000);\r\n        setNotes(notes.filter(n => n.id !== id));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? \"important\" : \"all\"}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) => (\r\n          <Notes\r\n            key={i}\r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}